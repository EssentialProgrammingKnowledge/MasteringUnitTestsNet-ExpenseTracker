@using ExpenseTracker.UI.Languages
@using ExpenseTracker.UI.Models
@using ExpenseTracker.UI.Services
@inject IDialogService DialogService
@inject ICategoryService CategoryService
@inject IExpenseService ExpenseService
@inject ISnackbar Snackbar
@inject ITranslateService TranslateService

<MudContainer>
    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" data-name="expenses-loading-icon" />
    }
    else
    {
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" @onclick="AddNewExpense" data-name="expenses-add-button">Dodaj wydatek</MudButton>

        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="searchQuery" TextChanged="OnSearchExpense" Immediate="true" Label="Szukaj po opisie" Adornment="Adornment.Start" Icon="@Icons.Material.Filled.Search" data-name="expenses-search-input" />
            </MudItem>
        </MudGrid>

        <MudTable Items="expensesToShow" Striped="true" Hover="true" Bordered="true" data-name="expenses-table">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Kwota</MudTh>
                <MudTh>Opis</MudTh>
                <MudTh>Kategoria</MudTh>
                <MudTh>Akcje</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd data-name="@($"expenses-column-id-{context.Id}")" DataLabel="Id">@context.Id</MudTd>
                <MudTd data-name="@($"expenses-column-with-id-{context.Id}-amount")" DataLabel="Amount">@context.Amount.ToCurrencyString()</MudTd>
                <MudTd data-name="@($"expenses-column-with-id-{context.Id}-description")" DataLabel="Description">@context.Description</MudTd>
                <MudTd data-name="@($"expenses-column-with-id-{context.Id}-category-id")" DataLabel="Category">@context.CategoryId</MudTd>
                <MudTd DataLabel="Actions">
                    <MudTooltip Text="Edytuj wydatek" Placement="Placement.Top" data-name="@($"expenses-column-edit-with-id-{context.Id}-tooltip")">
                        <MudIconButton data-name="@($"expenses-column-edit-with-id-{context.Id}")" @onclick="() => EditExpense(context.Id)" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                    </MudTooltip>
                    <MudTooltip Text="Usuń wydatek" Placement="Placement.Top" data-name="@($"expenses-column-delete-with-id-{context.Id}-tooltip")">
                        <MudIconButton data-name="@($"expenses-column-delete-with-id-{context.Id}")" @onclick="() => DeleteExpense(context.Id)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private string searchQuery = string.Empty;
    private List<ExpenseDTO> expenses = new List<ExpenseDTO>();
    private List<ExpenseDTO> expensesToShow = new List<ExpenseDTO>();
    private readonly MessageBoxOptions _deleteModalContent = new MessageBoxOptions
    {
        Title = "Usuń wydatek",
        Message = "Czy chcesz usunąć wydatek?",
        YesText = "Tak",
        NoText = "Nie"
    };
    private readonly DialogOptions _deleteModalOptions = new DialogOptions
    {
        BackdropClick = false,
        CloseOnEscapeKey = true,
        Position = DialogPosition.Center
    };
    private readonly DialogOptions _expenseFormModalOptions = new DialogOptions
    { 
        MaxWidth = MaxWidth.Medium, 
        FullWidth = true,
        BackdropClick = false,
        CloseOnEscapeKey = false,
        Position = DialogPosition.Center
    };
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadExpenses();
    }

    private void OnSearchExpense(string term)
    {
        expensesToShow = expenses
            .Where(p => p.Description.Contains(term, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task AddNewExpense()
    {
        var categories = await LoadCategories();
        var dialogReference = await DialogService.ShowAsync<ExpenseFormComponent>("Dodaj wydatek", new DialogParameters
        {
            { "Categories", categories }
        }, _expenseFormModalOptions);
        var result = await dialogReference.Result;

        if (result is null || result.Canceled)
        {
            return;
        }

        var dto = result.Data as ExpenseDTO;
        if (dto is null)
        {
            return;
        }

        await SaveExpense(dto);
    }

    private async Task DeleteExpense(int id)
    {
        var messageBoxValue = await DialogService.ShowMessageBox(_deleteModalContent, _deleteModalOptions);
        if (!messageBoxValue.HasValue || !messageBoxValue.Value)
        {
            return;
        }

        var result = await ExpenseService.Delete(id);
        if (!result.Valid)
        {
            if (result.ErrorMessage is not null)
            {
                Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
            }

            return;
        }

        Snackbar.Add("Pomyślnie usunięto wydatek", Severity.Success);
        await RefreshExpenses();
    }

    private async Task EditExpense(int id)
    {
        var categories = await LoadCategories();
        var expense = await LoadExpense(id);
        if (expense is null)
        {
            await LoadExpenses();
            return;
        }

        var dialogReference = await DialogService.ShowAsync<ExpenseFormComponent>("Edytuj wydatek", new DialogParameters
        {
            { "Categories", categories },
            { "Expense", expense?.ToDto() },
            { "Title", "Edytuj wydatek" }
        }, _expenseFormModalOptions);
        var result = await dialogReference.Result;

        if (result is null || result.Canceled)
        {
            return;
        }

        var dto = result.Data as ExpenseDTO;
        if (dto is null)
        {
            return;
        }

        await UpdateExpense(dto);
    }

    private async Task LoadExpenses()
    {
        try
        {
            isLoading = true;
            var result = await ExpenseService.GetAll();
            if (!result.Valid)
            {
                if (result.ErrorMessage is not null)
                {
                    Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
                }

                return;
            }

            expenses = result.Data ?? [];
            expensesToShow = expenses;
        }
        catch
        {
            Snackbar.Add("Wystąpił błąd podczas pobierania wydatków. Prosimy spróbować ponownie później", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<List<CategoryDTO>> LoadCategories()
    {
        try
        {
            isLoading = true;
            var result = await CategoryService.GetAll();
            if (!result.Valid)
            {
                if (result.ErrorMessage is not null)
                {
                    Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
                }

                return [];
            }

            return result.Data ?? [];
        }
        catch
        {
            Snackbar.Add("Wystąpił błąd podczas pobierania kateogrii. Prosimy spróbować ponownie później", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }

        return [];
    }

    private async Task<ExpenseDetailsDTO?> LoadExpense(int id)
    {
        try 
        {
            var result = await ExpenseService.GetById(id);
            if (!result.Valid)
            {
                if (result.ErrorMessage is not null)
                {
                    Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
                }

                return null;
            }

            return result.Data;
        }
        catch
        {
            Snackbar.Add("Wystąpił błąd podczas pobierania danych o wydatku. Prosimy spróbować ponownie później", Severity.Error);
            return null;
        }
    }

    private async Task SaveExpense(ExpenseDTO newExpense)
    {
        try
        {
            var result = await ExpenseService.Add(newExpense);
            if (!result.Valid)
            {
                if (result.ErrorMessage is not null)
                {
                    Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
                }

                return;
            }

            Snackbar.Add("Pomyślnie dodano wydatek", Severity.Success);
            await RefreshExpenses();
        }
        catch
        {
            Snackbar.Add("Wystąpił błąd podczas dodawania wydatku. Prosimy spróbować ponownie później", Severity.Error);
        }
    }

    private async Task UpdateExpense(ExpenseDTO expense)
    {
        try
        {
            var result = await ExpenseService.Update(expense);
            if (!result.Valid)
            {
                if (result.ErrorMessage is not null)
                {
                    Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
                }

                return;
            }

            Snackbar.Add("Pomyślnie zaaktualizowano wydatek", Severity.Success);
            await RefreshExpenses();
        }
        catch
        {
            Snackbar.Add("Wystąpił błąd podczas aktualizacji wydatku. Prosimy spróbować ponownie później", Severity.Error);
        }
    }

    private async Task RefreshExpenses()
    {
        await LoadExpenses();
        OnSearchExpense(searchQuery);
    }
}
